[2024-01-12T22:35:29.143+0000] {taskinstance.py:1957} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: fdic_ncua_staging.create_staging_ncua_cu_branch_info_temp manual__2024-01-12T22:35:28.157036+00:00 [queued]>
[2024-01-12T22:35:29.149+0000] {taskinstance.py:1957} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: fdic_ncua_staging.create_staging_ncua_cu_branch_info_temp manual__2024-01-12T22:35:28.157036+00:00 [queued]>
[2024-01-12T22:35:29.149+0000] {taskinstance.py:2171} INFO - Starting attempt 1 of 1
[2024-01-12T22:35:29.157+0000] {taskinstance.py:2192} INFO - Executing <Task(PostgresOperator): create_staging_ncua_cu_branch_info_temp> on 2024-01-12 22:35:28.157036+00:00
[2024-01-12T22:35:29.160+0000] {standard_task_runner.py:60} INFO - Started process 11389 to run task
[2024-01-12T22:35:29.163+0000] {standard_task_runner.py:87} INFO - Running: ['***', 'tasks', 'run', 'fdic_ncua_staging', 'create_staging_ncua_cu_branch_info_temp', 'manual__2024-01-12T22:35:28.157036+00:00', '--job-id', '195', '--raw', '--subdir', 'DAGS_FOLDER/fdic-ncua-staging.py', '--cfg-path', '/tmp/tmp4oc5229h']
[2024-01-12T22:35:29.164+0000] {standard_task_runner.py:88} INFO - Job 195: Subtask create_staging_ncua_cu_branch_info_temp
[2024-01-12T22:35:29.202+0000] {task_command.py:423} INFO - Running <TaskInstance: fdic_ncua_staging.create_staging_ncua_cu_branch_info_temp manual__2024-01-12T22:35:28.157036+00:00 [running]> on host c111cf247bc6
[2024-01-12T22:35:29.247+0000] {taskinstance.py:2481} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='***' AIRFLOW_CTX_DAG_ID='fdic_ncua_staging' AIRFLOW_CTX_TASK_ID='create_staging_ncua_cu_branch_info_temp' AIRFLOW_CTX_EXECUTION_DATE='2024-01-12T22:35:28.157036+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-01-12T22:35:28.157036+00:00'
[2024-01-12T22:35:29.248+0000] {sql.py:276} INFO - Executing: DROP TABLE IF EXISTS staging.ncua_cu_branch_info_temp;
CREATE TABLE staging.ncua_cu_branch_info_temp  (
    -- pulling from raw.ncua_cu_branch_info
    cu_number NUMERIC, -- NCUA Charter Number
    name TEXT, -- `cu_name`: Credit Union Name
    city TEXT, -- `physical_address_city`: City
    state_code TEXT, -- `physical_address_state_code`: State
    cycle_date TEXT, -- `cycle_date`: Quarterly Report Date
    dim_id TEXT PRIMARY KEY, -- MD5 hash of cu_number, name, city, state_code, and date_updated
    loaded_at TIMESTAMP WITH TIME ZONE, -- The date the most up-to-date version of this record was loaded into the table
    scraped_at TIMESTAMP WITH TIME ZONE -- The date this record was scraped
);

INSERT INTO staging.ncua_cu_branch_info_temp  (
    WITH cte1 AS (
        SELECT
            cu_number,
            cu_name,
            physical_address_city,
            physical_address_state_code,
            cycle_date,
            scraped_at,
            -- get scraped_at and convert to YYYYMMDD format
            to_char(scraped_at, 'YYYYMMDD') AS day_scraped_at
        FROM raw.ncua_credit_union_branch_information
    ),

    -- staging will contain one version of each institution for whatever date it was scraped on
    cte2 AS (
        SELECT
            cu_number,
            cu_name,
            physical_address_city,
            physical_address_state_code,
            cycle_date,
            day_scraped_at AS scraped_at
        FROM cte1
        GROUP BY
            cu_number,
            cu_name,
            physical_address_city,
            physical_address_state_code,
            cycle_date,
            day_scraped_at
    )

    SELECT
        cu_number::NUMERIC,
        cu_name AS name,
        physical_address_city AS city,
        physical_address_state_code AS state_code,
        cycle_date,
        md5(
            cu_number::TEXT || cu_name || physical_address_city || physical_address_state_code || cycle_date || scraped_at
        ) AS dim_id,
        NOW()::TIMESTAMP WITH TIME ZONE AS loaded_at,
        scraped_at::DATE AS scraped_at
    FROM cte2
);
[2024-01-12T22:35:29.253+0000] {base.py:83} INFO - Using connection ID 'alpharank_de_eval' for task execution.
[2024-01-12T22:35:29.257+0000] {base.py:83} INFO - Using connection ID 'alpharank_de_eval' for task execution.
[2024-01-12T22:35:29.537+0000] {sql.py:432} INFO - Running statement: DROP TABLE IF EXISTS staging.ncua_cu_branch_info_temp;
CREATE TABLE staging.ncua_cu_branch_info_temp  (
    -- pulling from raw.ncua_cu_branch_info
    cu_number NUMERIC, -- NCUA Charter Number
    name TEXT, -- `cu_name`: Credit Union Name
    city TEXT, -- `physical_address_city`: City
    state_code TEXT, -- `physical_address_state_code`: State
    cycle_date TEXT, -- `cycle_date`: Quarterly Report Date
    dim_id TEXT PRIMARY KEY, -- MD5 hash of cu_number, name, city, state_code, and date_updated
    loaded_at TIMESTAMP WITH TIME ZONE, -- The date the most up-to-date version of this record was loaded into the table
    scraped_at TIMESTAMP WITH TIME ZONE -- The date this record was scraped
);

INSERT INTO staging.ncua_cu_branch_info_temp  (
    WITH cte1 AS (
        SELECT
            cu_number,
            cu_name,
            physical_address_city,
            physical_address_state_code,
            cycle_date,
            scraped_at,
            -- get scraped_at and convert to YYYYMMDD format
            to_char(scraped_at, 'YYYYMMDD') AS day_scraped_at
        FROM raw.ncua_credit_union_branch_information
    ),

    -- staging will contain one version of each institution for whatever date it was scraped on
    cte2 AS (
        SELECT
            cu_number,
            cu_name,
            physical_address_city,
            physical_address_state_code,
            cycle_date,
            day_scraped_at AS scraped_at
        FROM cte1
        GROUP BY
            cu_number,
            cu_name,
            physical_address_city,
            physical_address_state_code,
            cycle_date,
            day_scraped_at
    )

    SELECT
        cu_number::NUMERIC,
        cu_name AS name,
        physical_address_city AS city,
        physical_address_state_code AS state_code,
        cycle_date,
        md5(
            cu_number::TEXT || cu_name || physical_address_city || physical_address_state_code || cycle_date || scraped_at
        ) AS dim_id,
        NOW()::TIMESTAMP WITH TIME ZONE AS loaded_at,
        scraped_at::DATE AS scraped_at
    FROM cte2
);, parameters: None
[2024-01-12T22:35:30.954+0000] {sql.py:441} INFO - Rows affected: 47936
[2024-01-12T22:35:31.029+0000] {taskinstance.py:1138} INFO - Marking task as SUCCESS. dag_id=fdic_ncua_staging, task_id=create_staging_ncua_cu_branch_info_temp, execution_date=20240112T223528, start_date=20240112T223529, end_date=20240112T223531
[2024-01-12T22:35:31.081+0000] {local_task_job_runner.py:234} INFO - Task exited with return code 0
[2024-01-12T22:35:31.111+0000] {taskinstance.py:3281} INFO - 1 downstream tasks scheduled from follow-on schedule check
